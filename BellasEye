#!/bin/bash

#colours
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
#Bold
BGREEN="\033[1;32m"
BRED="\033[1;31m"
BBLUE="\033[1;34m"
BPURPLE="\033[1;35m"
BWHITE="\033[1;37m"
BYELLOW="\033[1;33m"
BCYAN="\033[1;36m"
# Underline
UBLACK="\033[4;30m"       # Black
URED="\033[4;31m"         # Red
UGREEN="\033[4;32m"       # Green
UYELLOW="\033[4;33m"      # Yellow
UBLUE="\033[4;34m"        # Blue
UPURPLE="\033[4;35m"      # Purple
UCYAN="\033[4;36m"        # Cyan
UWHITE="\033[4;37m"       # White
#BoldUnderline
BUGREEN="\033[1;32m\033[4;32m"
BURED="\033[1;31m\033[4;31m"
BUBLUE="\033[1;34m\033[4;34m" 
BUPURPLE="\033[1;35m\033[4;35m"
BUWHITE="\033[1;37m\033[4;37m"
#NoColour
NC='\033[0m'


#Gobuster Options
wordlist1="/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt"
wordlist2="/usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt"
extension="php" #Format: a,b,c
threads=250

#aircrack-ng password list
passlist="/usr/share/wordlists/rockyou.txt"

#TheHarvester Options
source="all" #Options: baidu, bing, bingapi, bufferoverun, certspotter, crtsh, dnsdumpster, duckduckgo, exalead, github-code, google, hackertarget, hunter, intelx, linkedin, linkedin_links, netcraft, otx,pentesttools, projectdiscovery, qwant, rapiddns, securityTrails, spyse, sublist3r, threatcrowd, threatminer, trello, twitter, urlscan, virustotal, yahoo
limit=500 #Number of searches

#nvd parser
apiSet()
{
	read -p $'\033[1;36m'"Enter a valid API key: "$'\033[0m' api_set
	echo "$api_set" > api.key
	api=$(cat api.key)
	echo
}

nmaprubys()
{
	flag="3zle21pnoxbb"
	if [[ $(cat flags.txt | grep "$flag") ]]
	then
		echo -e "${BRED}[*] Skipping Duplicate Process: NMAP Simple Scan${NC}"
		echo 
	else
		echo
		echo -e "${BYELLOW}[-]Starting a Simple NMAP Scan"
		echo -e "${NC}"
		nohup xterm -fa 'Monospace' -fs 10 -geometry 109x5 -title "NMAP Simple Scan for $ip" -e 'ruby nmapbar.rb -s '$ip' | head -n 0' 2>/dev/null
		echo "$flag" >> flags.txt
	fi
}
nmaprubyc()
{
	flag="oj3t7ogc2kwt"
	if [[ $(cat flags.txt | grep "$flag") ]]
	then
		echo -e "${BRED}[*] Skipping Duplicate Process: NMAP TCP Scan${NC}"
		echo 
	else
		echo
		echo -e "${BYELLOW}[-]Starting an NMAP TCP Scan"
		echo -e "${NC}"
		nohup xterm -fa 'Monospace' -fs 10 -geometry 109x5 -title "NMAP TCP Scan for $ip" -e 'ruby nmapbar.rb -c '$ip' | head -n 0' 2>/dev/null
		echo "$flag" >> flags.txt
	fi
}
nmaprubyu()
{
	flag="30u81neo0xkr"
	if [[ $(cat flags.txt | grep "$flag") ]]
	then
		echo -e "${BRED}[*] Skipping Duplicate Process: NMAP UDP Scan${NC}"
		echo 
	else
		echo
		echo -e "${BYELLOW}[-]Starting an NMAP Scan For First 1000 UDP Ports"
		echo -e "${NC}"
		nohup xterm -fa 'Monospace' -fs 10 -geometry 109x5 -title "NMAP UDP Scan for $ip" -e 'ruby nmapbar.rb -u '$ip' | head -n 0' 2>/dev/null
		echo "$flag" >> flags.txt
	fi
}
nmaprubyv()
{
	flag="wq4weh8y8lq0"
	if [[ $(cat flags.txt | grep "$flag") ]]
	then
		echo -e "${BRED}[*] Skipping Duplicate Process: NMAP Vuln Scan${NC}"
		echo 
	else
		echo
		echo -e "${BYELLOW}[-]Starting a Vulnerability Scanner"
		echo -e "${NC}"
		nohup xterm -fa 'Monospace' -fs 10 -geometry 109x5 -title "NMAP Vulnerability Scan for $ip" -e 'ruby nmapbar.rb -v '$ip' | head -n 0' 2>/dev/null
		echo "$flag" >> flags.txt
	fi
}
nmaprubyh()
{
	flag="xqld8vxa13qo"
	if [[ $(cat flags.txt | grep "$flag") ]]
	then
		echo -e "${BRED}[*] Skipping Duplicate Process: NMAP Half Open Scan${NC}"
		echo 
	else
		echo
		echo -e "${BYELLOW}[-]Starting an NMAP Half Open Scan"
		echo -e "${NC}"
		nohup xterm -fa 'Monospace' -fs 10 -geometry 109x5 -title "NMAP Half Open Scan for $ip" -e 'ruby nmapbar.rb -h '$ip' | head -n 0' 2>/dev/null
		echo "$flag" >> flags.txt
	fi
}
nmaprubyau()
{
	flag="hucqbsjy4lz6"
	if [[ $(cat flags.txt | grep "$flag") ]]
	then
		echo -e "${BRED}[*] Skipping Duplicate Process: NMAP All UDP Ports Scan${NC}"
		echo 
	else
		echo
		echo -e "${BYELLOW}[-]Starting an NMAP UDP Scan"
		echo -e "${NC}"
		nohup xterm -fa 'Monospace' -fs 10 -geometry 109x5 -title "NMAP UDP All Ports Scan for $ip" -e 'ruby nmapbar.rb -a '$ip' | head -n 0' 2>/dev/null
		echo "$flag" >> flags.txt
	fi
}

gobust()
{ 
	gohttp()
	{
		flag="8zpt56tqjn0s"
		if [[ $(cat flags.txt | grep "$flag") ]]
		then
			echo -e "${BRED}[*] Skipping Duplicate Process: Gobuster On Port 80${NC}"
			echo 
		else	
			p="80"
			echo -e "${BGREEN}Running gobuster on 80${NC}"
			if [ -e "$wordlist1" ]
			then
				xterm -fa 'Monospace' -fs 10 -geometry 63x30 -title "Gobuster On Port 80" -e "gobuster dir --url http://$ip -w $wordlist1 -t $threads -x $extension -o Gobust_$ip\_$p.txt -q | grep '^/'" 2>/dev/null
			else
				xterm -fa 'Monospace' -fs 10 -geometry 63x30 -title "Gobuster On Port 80" -e "gobuster dir --url http://$ip -w $wordlist2 -t $threads -x $extension -o Gobust_$ip\_$p.txt -q | grep '^/'" 2>/dev/null
			fi
		fi			
	}
	gohttps()
	{
		flag="g56t56tqj4t"
		if [[ $(cat flags.txt | grep "$flag") ]]
		then
			echo -e "${BRED}[*] Skipping Duplicate Process: Gobuster On Port 443${NC}"
			echo 
		else	
			p="443"
			echo -e "${BGREEN}Running gobuster on 443${NC}"
			if [ -e "$wordlist1" ]
			then
				xterm -fa 'Monospace' -fs 10 -geometry 63x30 -title "Gobuster On Port 443" -e "gobuster dir --url https://$ip -w $wordlist1 -t $threads -x $extension -o Gobust_$ip\_$p.txt -q | grep '^/'" 2>/dev/null
			else
				xterm -fa 'Monospace' -fs 10 -geometry 63x30 -title "Gobuster On Port 443" -e "gobuster dir --url https://$ip -w $wordlist2 -t $threads -x $extension -o Gobust_$ip\_$p.txt -q | grep '^/'" 2>/dev/null
			fi
		fi	
	}
	echo
	echo -e "${BYELLOW}[-]Starting Gobuster"
	echo -e "${NC}"
	echo -e "${BGREEN}Running portscan for gobuster${NC}"
	nmap -p80,443 "$ip" -oX gobust.xml >& /dev/null
	xmlstarlet sel -t -m '//port/state[@state="open"]' -v '../@portid' -n gobust.xml 1> gports.txt 2> /dev/null

	if [[ ! -z $(cat gports.txt | grep 80) && -z $(cat gports.txt | grep 443) ]]
	then
		echo -e "Port 80 is open!"
		echo
		gohttp

	elif [[ ! -z $(cat gports.txt | grep 443) && -z $(cat gports.txt | grep 80) ]]
	then
		echo -e "Port 443 is open!"
		echo
		gohttps
		
	elif [[ ! -z $(cat gports.txt | grep 80) && ! -z $(cat gports.txt | grep 443) ]]
	then
		echo -e "Both 80 and 443 are open!"
		echo
		
		ctime=10
		read -t $ctime -p $'\033[1;32m'"Choose one to start gobuster. Waiting $ctime secs (80, 443, both)(Default: both) : "$'\033[0m' go_port
		echo ""
		if [[ "$go_port" == '80' ]]
		then
			gohttp
			echo
		elif [[ "$go_port" == '443' ]]
		then
			gohttps
			echo
		elif [[ "$go_port" == 'both' ]]
		then
			gohttp & gohttps
			echo		
		elif [[ -z "$go_port" ]]
		then
			gohttp & gohttps
			echo ""
		fi
	fi

	wait
	echo ""
	echo -e "${BYELLOW}[-]Checking NMAP results For Any Other Websites."
	echo -e "${NC}"
	nmap -T4 -oX ports.xml "$ip" >& /dev/null
	xmlstarlet sel -t -m '//port/service[@name="http" or @name="https"]' -v '../@portid' -n ports.xml 1> ports.txt 2> /dev/null
	sed -i '/80\|443/d' ports.txt 2> /dev/null

	if [[ ! -z $(cat ports.txt) ]]
	then
		
		while read -r p
		do
			echo -e ""
			echo -e "${BGREEN}Website(s) found on port(s):${NC} \n$c "
			echo 
			if [ -e "$wordlist1" ]
			then
				xterm -fa 'Monospace' -fs 10 -geometry 63x30 -title "Gobuster On Port $p" -e "gobuster dir --url http://$ip:$p -w $wordlist1 -t $threads -x $extension -o Gobust_$ip\_$p.txt | grep '^/'" 2>/dev/null
			else
				xterm -fa 'Monospace' -fs 10 -geometry 63x30 -title "Gobuster On Port $p" -e "gobuster dir --url http://$ip:$p -w $wordlist2 -t $threads -x $extension -o Gobust_$ip\_$p.txt | grep '^/'" 2>/dev/null
			fi
		done < ports.txt 
	else
		echo -e "No Other Websites Found!"
		echo
	fi	
	echo "$flag" >> flags.txt
	rm ports.txt gports.txt gobust.xml ports.xml ports.xml >& /dev/null
}

vuln()
{
	urlencode() 
	{
	  python -c 'import urllib, sys; print urllib.quote(sys.argv[1], sys.argv[2])' \
	    "$1" "$urlencode_safe"
	}


	sever_colour()
	{
		while read -r line
		do
			if [[ "$line" == CRITICAL || "$line" == critical ]]
			then
				sever=$(echo -e "${BPURPLE}CRITICAL${NC}")
				sed -i "s/$line/$sever/" "$1"
			fi
			if [[ "$line" == HIGH || "$line" == high ]]
			then
				sever=$(echo -e "${BRED}HIGH${NC}")
				sed -i "s/$line/$sever/" "$1"
			fi
			if [[ "$line" == MEDIUM || "$line" == medium ]]
			then
				sever=$(echo -e "${BYELLOW}MEDIUM${NC}")
				sed -i "s/$line/$sever/" "$1"
			fi
			if [[ "$line" == LOW || "$line" == low ]]
			then
				sever=$(echo -e "${BGREEN}LOW${NC}")
				sed -i "s/$line/$sever/" "$1"
			fi		 
		done < "$1"
	}

	encode=$(urlencode "$search")

	#exploit-db parser
	expdb()
	{
		echo -e "${BYELLOW}[-]Parsing Exploit-DB${NC}"
		echo
		if [[ ! $(searchsploit "$search" | grep "Exploits: No Results") ]]
		then
			searchsploit "$search" --json -w > result3.json
			jq -r '.RESULTS_EXPLOIT[] | .Title, .URL' result3.json > tmp3.txt
			parallel --link echo ::: "$(tput smul; tput bold; printf %s"TITLE"; tput rmul; printf %s":"; tput sgr0;)" "$(tput smul; tput bold; printf %s"URL"; tput rmul; printf %s":"; tput sgr0;)" :::: tmp3.txt | sed '0~2 a\\'
			rm tmp3.txt
			echo
		else
			echo -e "${BRED}Use Different or Fewer Keywords!${NC}"
			echo
		fi
	}


	nvd()
	{
		output()
		{
			cve_meta=$(jq -r .cve.CVE_data_meta.ID result2.json 2> /dev/null)
			desc=$(jq -r .cve.description.description_data[].value result2.json 2>/dev/null)
			ref=$(jq -r .cve.references.reference_data[0:7][].url result2.json 2>/dev/null)
			scorev2=$(jq -r .impact.baseMetricV2.cvssV2.baseScore result2.json 2>/dev/null)
			scorev3=$(jq -r .impact.baseMetricV3.cvssV3.baseScore result2.json 2>/dev/null)
			severityv2=$(jq -r .impact.baseMetricV2.severity result2.json 1> sever.tmp 2>/dev/null)
			severityv3=$(jq -r .impact.baseMetricV3.cvssV3.baseSeverity result2.json 1> sever1.tmp 2>/dev/null)
			
			sever_colour sever.tmp				
			severv2=$(cat sever.tmp)
			
			sever_colour sever1.tmp
			severv3=$(cat sever1.tmp)
			
			echo -e "$(tput smul; tput bold; printf %s"CVE"; tput rmul; printf %s":"; tput sgr0;)" "$cve_meta"
			echo -e "$(tput smul; tput bold; printf %s"SEVERITY(CVSS V2, CVSS V3)"; tput rmul; printf %s":"; tput sgr0;)" "$severv2, $severv3"
			echo -e "$(tput smul; tput bold; printf %s"BASE SCORE(CVSS V2, CVSS V3)"; tput rmul; printf %s":"; tput sgr0;)" "$scorev2, $scorev3"
			echo -e "$(tput smul; tput bold; printf %s"DESCRIPTION"; tput rmul; printf %s":"; tput sgr0;)" "$desc"
			echo -e "$(tput smul; tput bold; printf %s"REFERENCES"; tput rmul; printf %s":"; tput sgr0;)" "$ref"
			echo
		}
		
		echo -e "${BYELLOW}[-]Parsing National Vulnerability Database${NC}"
		echo
		
		result()
		{
			jq -r .totalResults "$1" 2>/dev/null
		}
		
		if [[ "$encode" = CVE-* ]]
		then
			curl -k -s --url https://services.nvd.nist.gov/rest/json/cve/1.0/"$encode" | jq --tab > result2.json
			
			if [[ $(result result2.json) > 0 ]]
			then
				cve=$(jq -r .result.CVE_Items[].cve.CVE_data_meta.ID result2.json 2> /dev/null)
				severityv2=$(jq -r .result.CVE_Items[].impact.baseMetricV2.severity result2.json 1> sever.tmp 2>/dev/null)
				severityv3=$(jq -r .result.CVE_Items[].impact.baseMetricV3.cvssV3.baseSeverity result2.json 1> sever1.tmp 2>/dev/null)
				scorev2=$(jq -r .result.CVE_Items[].impact.baseMetricV2.cvssV2.baseScore result2.json 2>/dev/null)
				scorev3=$(jq -r .result.CVE_Items[].impact.baseMetricV3.cvssV3.baseScore result2.json 2>/dev/null)
				desc=$(jq -r .result.CVE_Items[].cve.description.description_data[].value result2.json 2>/dev/null)
				ref=$(jq -r .result.CVE_Items[].cve.references.reference_data[0:7][].url result2.json 2>/dev/null)
				
				sever_colour sever.tmp
				severv2=$(cat sever.tmp)
				
				sever_colour sever1.tmp
				severv3=$(cat sever1.tmp)
				
				echo -e "$(tput smul; tput bold; printf %s"CVE"; tput rmul; printf %s":"; tput sgr0;)" "$cve"
				echo -e "$(tput smul; tput bold; printf %s"SEVERITY(CVSS V2, CVSS V3)"; tput rmul; printf %s":"; tput sgr0;)" "$severv2, $severv3"
				echo -e "$(tput smul; tput bold; printf %s"BASE SCORE(CVSS V2, CVSS V3)"; tput rmul; printf %s":"; tput sgr0;)" "$scorev2, $scorev3"
				echo -e "$(tput smul; tput bold; printf %s"DESCRIPTION"; tput rmul; printf %s":"; tput sgr0;)" "$desc"
				echo -e "$(tput smul; tput bold; printf %s"REFERENCES"; tput rmul; printf %s":"; tput sgr0;)" "$ref"
				echo
			else
				echo -e "${BRED}No Results!${NC}"
			fi		
		
		elif [[ "$encode" = cpe* ]]
		then
			curl -k -s --url https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString="$encode"\&resultsPerPage=15 | jq --tab > result2.json
			
			if [[ $(result result2.json) > 0 ]]
			then
				cve=$(jq -r .result.CVE_Items[].cve.CVE_data_meta.ID result2.json 1> cve.tmp 2> /dev/null)
					
				while read -r line
				do
					jq -r '.result.CVE_Items[] | select(.cve.CVE_data_meta.ID == "'$line'")' result2.json > result_5.json
					severityv2=$(jq -r .impact.baseMetricV2.severity result_5.json 1> sever.tmp 2>/dev/null)
					severityv3=$(jq -r .impact.baseMetricV3.cvssV3.baseSeverity result_5.json 1> sever1.tmp 2>/dev/null)
					scorev2=$(jq -r .impact.baseMetricV2.cvssV2.baseScore result_5.json 2>/dev/null)
					scorev3=$(jq -r .impact.baseMetricV3.cvssV3.baseScore result_5.json 2>/dev/null)
					desc=$(jq -r .cve.description.description_data[].value result_5.json 2>/dev/null)
					ref=$(jq -r .cve.references.reference_data[0:7][].url result_5.json 2>/dev/null)
					cve_meta=$(jq -r .cve.CVE_data_meta.ID result_5.json 2> /dev/null)
				
					sever_colour sever.tmp
					severv2=$(cat sever.tmp)
					
					sever_colour sever1.tmp
					severv3=$(cat sever1.tmp)
					
					echo -e "$(tput smul; tput bold; printf %s"CVE"; tput rmul; printf %s":"; tput sgr0;)" "$cve_meta"
					echo -e "$(tput smul; tput bold; printf %s"SEVERITY(CVSS V2, CVSS V3)"; tput rmul; printf %s":"; tput sgr0;)" "$severv2, $severv3"
					echo -e "$(tput smul; tput bold; printf %s"BASE SCORE(CVSS V2, CVSS V3)"; tput rmul; printf %s":"; tput sgr0;)" "$scorev2, $scorev3"
					echo -e "$(tput smul; tput bold; printf %s"DESCRIPTION"; tput rmul; printf %s":"; tput sgr0;)" "$desc"
					echo -e "$(tput smul; tput bold; printf %s"REFERENCES"; tput rmul; printf %s":"; tput sgr0;)" "$ref"
					echo				
				done < cve.tmp
			else
				echo -e "${BRED}No Results!${NC}"
			fi
			
		elif [[ "$encode" = CWE-* ]]
		then
			
			curl -k -s --url https://services.nvd.nist.gov/rest/json/cves/1.0?cweId="$encode"\&resultsPerPage=15 | jq --tab > result2.json
		
			if [[ $(result result2.json) > 0 ]]
			then
				cve=$(jq -r .result.CVE_Items[].cve.CVE_data_meta.ID result2.json 1> cve.tmp 2> /dev/null)
						
				while read -r line
				do
					jq -r '.result.CVE_Items[] | select(.cve.CVE_data_meta.ID == "'$line'")' result2.json > result_5.json
					severityv2=$(jq -r .impact.baseMetricV2.severity result_5.json 1> sever.tmp 2>/dev/null)
					severityv3=$(jq -r .impact.baseMetricV3.cvssV3.baseSeverity result_5.json 1> sever1.tmp 2>/dev/null)
					scorev2=$(jq -r .impact.baseMetricV2.cvssV2.baseScore result_5.json 2>/dev/null)
					scorev3=$(jq -r .impact.baseMetricV3.cvssV3.baseScore result_5.json 2>/dev/null)
					desc=$(jq -r .cve.description.description_data[].value result_5.json 2>/dev/null)
					ref=$(jq -r .cve.references.reference_data[0:7][].url result_5.json 2>/dev/null)
					cve_meta=$(jq -r .cve.CVE_data_meta.ID result_5.json 2> /dev/null)
				
					sever_colour sever.tmp
					severv2=$(cat sever.tmp)
					
					sever_colour sever1.tmp
					severv3=$(cat sever1.tmp)
					
					echo -e "$(tput smul; tput bold; printf %s"CVE"; tput rmul; printf %s":"; tput sgr0;)" "$cve_meta"
					echo -e "$(tput smul; tput bold; printf %s"SEVERITY"; tput rmul; printf %s":"; tput sgr0;)" "$severv2, $severv3"
					echo -e "$(tput smul; tput bold; printf %s"BASE SCORE"; tput rmul; printf %s":"; tput sgr0;)" "$scorev2, $scorev3"
					echo -e "$(tput smul; tput bold; printf %s"DESCRIPTION"; tput rmul; printf %s":"; tput sgr0;)" "$desc"
					echo -e "$(tput smul; tput bold; printf %s"REFERENCES"; tput rmul; printf %s":"; tput sgr0;)" "$ref"
					echo				
				done < cve.tmp
			else
				echo -e "${BRED}No Results!${NC}"
			fi
			
		else
			curl -k -s --url https://services.nvd.nist.gov/rest/json/cves/1.0?keyword="$encode"\&resultsPerPage=15 | jq --tab > result1.json
			
			if [[ $(result result1.json) > 0 ]]
			then

				if [[ $(echo "$results") != 0 ]]
				then
					cve=$(jq -r '.result.CVE_Items[] | select(.impact.baseMetricV3.cvssV3.baseSeverity == "CRITICAL")' result1.json > result_4.json)
					cve_5=$(jq -r .cve.CVE_data_meta.ID result_4.json 1> cve_5.tmp 2>/dev/null)
				
					if [[ ! -z $(cat cve_5.tmp) ]]
					then
						while read -r line
						do
							jq -r '. | select(.cve.CVE_data_meta.ID == "'$line'")' result_4.json > result2.json
							output
						done < cve_5.tmp
					fi
					
					cve=$(jq -r '.result.CVE_Items[] | select(.impact.baseMetricV2.severity == "HIGH")' result1.json > result_5.json)
					cve_5=$(jq -r .cve.CVE_data_meta.ID result_5.json 1> cve_5.tmp 2>/dev/null)
				
					if [[ ! -z $(cat cve_5.tmp) ]]
					then
						while read -r line
						do
							jq -r '. | select(.cve.CVE_data_meta.ID == "'$line'")' result_5.json > result2.json
							output
						done < cve_5.tmp
					fi
					
					cve1=$(jq -r '.result.CVE_Items[] | select(.impact.baseMetricV2.severity == "MEDIUM")' result1.json > result1_5.json)
					cve1_5=$(jq -r .cve.CVE_data_meta.ID result1_5.json 2>/dev/null)
					echo "$cve1_5" > cve1_5.tmp
					if [[ ! -z $(cat cve1_5.tmp) ]]
					then
						while read -r line
						do
							jq -r '. | select(.cve.CVE_data_meta.ID == "'$line'")' result1_5.json > result2.json
							output
						done < cve1_5.tmp
					fi
					
					cve2=$(jq -r '.result.CVE_Items[] | select(.impact.baseMetricV2.severity == "LOW")' result1.json > result2_5.json)
					cve2_5=$(jq -r .cve.CVE_data_meta.ID result2_5.json 2>/dev/null)
					echo "$cve2_5" > cve2_5.tmp
					if [[ ! -z $(cat cve2_5.tmp) ]]
					then
						while read -r line
						do
							jq -r '. | select(.cve.CVE_data_meta.ID == "'$line'")' result2_5.json > result2.json
							output
						done < cve2_5.tmp
					fi
				fi
			fi
		fi	
	rm cve.tmp cve_5.tmp cve1_5.tmp cve2_5.tmp >& /dev/null
	rm result_5.json result1_5.json result2_5.json >& /dev/null
	}

	vuldb()
	{
		resp_check()
		{
			if [[ $(echo "$status") == 200 && $(echo "$items") == 0 ]]
			then
				echo -e "${BRED}No Results Found! Check Your Keywords.${NC}"
				echo
				
			elif [[ $(echo "$status") == 204 ]]
			then
				echo -e "${BRED}No Results Returned! No Record Available.${NC}"
				echo
				
			elif [[ $(echo "$status") == 401 ]]
			then
				echo -e "${BRED}API Key Missing! Register on VulDB To Get An API Key or Enter a Valid API Key.${NC}"
				echo
				
			elif [[ $(echo "$status") == 403 ]]
			then
				echo -e "${BRED}API Rate Exceeded! No Further Requests Until Counter Reset.${NC}"
				echo
				
			elif [[ $(echo "$status") == 405 ]]
			then
				echo -e "${BRED}Unknown Request!${NC}"
				echo
				
			elif [[ $(echo "$status") != 200 && $(echo "$status") != 204 && $(echo "$status") != 401 && $(echo "$status") != 403 && $(echo "$status") != 405 ]] 
			then
				echo -e "${BRED}Unknown Response! Check Your Internet.${NC}"
				echo
				
			fi 
		}
		
		echo -e "${BYELLOW}[-]Parsing VulDB${NC}"
		echo
		if [[ "$encode" = CVE-* ]]
		then
			curl -s -k --data "apikey=$api&advancedsearch=cve:$encode" https://vuldb.com/?api 1> result.json  2>/dev/null
			cve=$(jq -r .result[].source.cve.id result.json 1> cve.tmp 2>/dev/null)
			status=$(jq -r .response.status result.json 2>/dev/null)
			items=$(jq -r .response.items result.json 2>/dev/null)
			
			while read -r line
			do
				jq -r '.result[] | select(.source.cve.id == "'$line'")' result.json 1> result_5.json 2>/dev/null
				title=$(jq -r .entry.title result_5.json 2>/dev/null)
				id=$(jq -r .entry.id result_5.json 2>/dev/null)
				level=$(jq -r .vulnerability.risk.name result_5.json > level.tmp)
				cve1=$(jq -r .source.cve.id result_5.json 2>/dev/null)
				
				sever_colour level.tmp	
				resp_check
				
				if [[ $(echo "$status") == 200 && $(echo "$items") != 0 ]]
				then
					echo -e "$(tput smul; tput bold; printf %s"CVE"; tput rmul; printf %s":"; tput sgr0;)" "$cve1"
					echo -e "$(tput smul; tput bold; printf %s"VULDB ID"; tput rmul; printf %s":"; tput sgr0;)" "$id"
					echo -e "$(tput smul; tput bold; printf %s"SEVERITY"; tput rmul; printf %s":"; tput sgr0;)" "$(cat level.tmp)"
					echo -e "$(tput smul; tput bold; printf %s"DESCRIPTION"; tput rmul; printf %s":"; tput sgr0;)" "$title"
					echo
				fi
			done < cve.tmp
			
		elif [[ "$encode" = cpe* ]]
		then
			curl -s -k --data "apikey=$api&search=$encode" https://vuldb.com/?api 1> result.json 2>/dev/null
			cpe=$(jq -r .request.value result.json 2> /dev/null)
			status=$(jq -r .response.status result.json 2>/dev/null)
			items=$(jq -r .response.items result.json 2>/dev/null)
			cve=$(jq -r .result[].source.cve.id result.json 1> cve.tmp 2> /dev/null)
			
			resp_check
			
			if [[ $(echo "$status") == 200 && $(echo "$items") != 0 ]]
			then
				while read -r line
				do
					jq -r '.result[] | select(.source.cve.id == "'$line'")' result.json 1> result_5.json 2>/dev/null
					cve1=$(jq -r .source.cve.id result_5.json 2> /dev/null)
					level=$(jq -r .vulnerability.risk.name result_5.json 1> level.tmp 2>/dev/null)			
					title=$(jq -r .entry.title result_5.json 2> /dev/null)
					id=$(jq -r .entry.id result_5.json 2> /dev/null)
					
					sever_colour level.tmp
					
					echo -e "$(tput smul; tput bold; printf %s"CVE"; tput rmul; printf %s":"; tput sgr0;)" "$cve1"
					echo -e "$(tput smul; tput bold; printf %s"VULDB ID"; tput rmul; printf %s":"; tput sgr0;)" "$id"
					echo -e "$(tput smul; tput bold; printf %s"SEVERITY"; tput rmul; printf %s":"; tput sgr0;)" "$(cat level.tmp)"
					echo -e "$(tput smul; tput bold; printf %s"DESCRIPTION"; tput rmul; printf %s":"; tput sgr0;)" "$title"
					echo
				done < cve.tmp
			fi
			
		else
			curl -s -k --data "apikey=$api&search=$encode" https://vuldb.com/?api 1> result.json 2>/dev/null
			status=$(jq -r .response.status result.json 2>/dev/null)
			items=$(jq -r .response.items result.json 2>/dev/null)
			title=$(jq -r .result[].entry.title result.json 2>/dev/null)
			cve=$(jq -r .result[].source.cve.id result.json 2>/dev/null)
			id=$(jq -r .result[].entry.id result.json 2>/dev/null)
			level=$(jq -r .result[].vulnerability.risk.name result.json 1> level.tmp 2>/dev/null)
			
			sever_colour level.tmp	
			resp_check
			
			if [[ $(echo "$status") == 200 && $(echo "$items") != 0 ]]
			then
		
				vulid=$(tput smul; tput bold; tput setaf 4; printf %s"VULDB-ID"; tput rmul) 
				level=$(tput smul; printf %s"LEVEL"; tput rmul) 
				cveid=$(tput smul; printf %s"CVE"; tput rmul) 
				titleout=$(tput smul; printf %s"TITLE"; tput rmul; tput sgr0)
				
				paste <(echo "$id") <(cat level.tmp) <(echo "$cve") <(echo "$title") | column -t -s$'\t' -L --table-columns ${vulid},${level},${cveid},${titleout} -W ${titleout}
				echo
			fi

		fi

	}	

	expdb
	nvd
	vuldb
	echo "$flag" >> flags.txt
	rm result.json result1.json result2.json result3.json result_4.json level.tmp sever1.tmp sever.tmp >& /dev/null
}


pingSweep()
{
	echo
	read -p $'\033[1;32mEnter an ip range: '$'\033[0m' ip
	echo
	read -p $'\033[1;32mEnter The Name Of Manufacturer (Or Leave Blank To See Them All): '$'\033[0m' device
	if [ ! -z "$device" ]
	then
		echo ""
		echo -e "${BYELLOW}[-]Looking For Manufacturers Named. $device"
		echo -e "${NC}"
	else
		echo ""
		echo -e "${BYELLOW}[-]No manufacturer was selected. Listing all available devices."
		echo -e "${NC}"
	fi
	nmap -sn "$ip" -oX scan.xml >& /dev/null
	
	mac=$(xmlstarlet sel -t -m '//address[2]' -v '@addr' -n scan.xml)
	manu=$(xmlstarlet sel -t -m '//address[2]' -v '@vendor' -n scan.xml)
	ipadd=$(xmlstarlet sel -t -m '//address[1]' -v '@addr' -n scan.xml)
	
	ipa=$(tput smul; tput setaf 4; tput bold; printf %s"IP-ADDRESS"; tput rmul)
	macad=$(tput smul; printf %s"MAC ADDRESS"; tput rmul)
	manuf=$(tput smul; printf %s"MANUFACTURER"; tput sgr0)
	
	if [[ -z $(echo "$manu" | grep "$device") ]]
	then
		echo -e "${BRED}No Such Manufacturer Found!${NC}"
		echo
	else
		paste <(echo "$ipadd") <(echo "$mac") <(echo "$manu") | grep "$device" | column -t -s$'\t' -L -N "${ipa}","${macad}","${manuf}"
		echo
	fi
	rm scan.xml 
}

wifiHack()
{
	channelchange()
	{
		if [[ $(cat tmp1.txt | grep "but the AP uses") ]]
		then
			iwconfig "$g" channel "$channel"
		fi 
	}

	echo -e "${BGREEN}[-]Checking if any wireless interface cards exist${NC}"
	ifconfig | grep wlan > tmp.txt
	a="$?"
	b=$(cat tmp.txt | grep wlan | awk '{print $1}' | tr -d ':')
	if [ $a == 0 ]
	then 
		echo -e "${BGREEN}[-]Wireless Card Exists${NC}"
		echo -e "${BGREEN}[-]Name:${NC} $b"
	else 
		echo -e "${BRED}No wireless interface found!${NC}"
		exit 0
	fi
	rm tmp.txt

	ifconfig "$b" up >& /dev/null
	echo -e "${BGREEN}[-]Killing Troublesome Processes${NC}"
	airmon-ng check kill >& /dev/null
	echo -e "${BGREEN}[-]Changing the wifi interface to monitor mode${NC}"
	airmon-ng start "$b" >& /dev/null
	f=$(ifconfig | grep wlan | awk '{print $1}' | tr -d ':')
	iwconfig "$f" | grep "Mode:Monitor" | awk '{print $1}' >& /dev/null
	d="$?"
	if [[ $d == 0 ]]
	then
		echo -e "${BGREEN}[-]The interface has been set to monitor mode${NC}"
		g=$(ifconfig | grep wlan | awk '{print $1}' | tr -d ':')
		echo -e "${BGREEN}[-]New Interface Name:${NC} $g"
	else
		echo -e "${BRED}The interface cannot be configured to monitor mode${NC}"
		echo
		exit
	fi

	read -p $'\033[1;32m[-]Enter The target Wifi\e[0m: '$'\033[0m' target
	rm current* >& /dev/null

	{ timeout 15 airodump-ng -w current --output-format netxml wlan0mon &> tmp.txt; } &
	PID=$!

	sleep 10

	kill -TERM $PID

	xmlstarlet fo current-01.kismet.netxml > format_current-01.xml

	essid=$(xmlstarlet sel -t -m '//SSID/essid' -v . -n format_current-01.xml 2> /dev/null)
	bssid_ch=$(xmlstarlet sel -t -m '//wireless-network' -v "BSSID" -o "        " -v "channel" -o "        " -n format_current-01.xml 2> /dev/null)
	target_list=$(paste <(echo "$bssid_ch") <(echo "$essid")) 
	if [[ ! $(echo "$target_list" | grep "$target") ]]
	then
		echo -e "${BRED}[-]Invalid SSID!${NC}"
		echo -e "${BGREEN}[-]Starting Network Manager${NC}"
		service NetworkManager restart
		echo -e "${BGREEN}[-]Changing Interface Back To Managed Mode${NC}"
		airmon-ng stop "$g" >& /dev/null
		rm tmp1.txt tmp.txt >& /dev/null
		exit
	fi
	essid=$(echo "$target_list" | grep "$target" | awk '{print $3}')
	bssid=$(echo "$target_list" | grep "$target" | awk '{print $1}')
	channel=$(echo "$target_list" | grep "$target" | awk '{print $2}')
	echo -e "${BYELLOW}ESSID  :${NC} $target"
	echo -e "${BYELLOW}BSSID  :${NC} $bssid"
	echo -e "${BYELLOW}Channel:${NC} $channel"

	rm tmp.txt >& /dev/null

	rm *.cap >& /dev/null
	echo -e "${BGREEN}[-]Starting a listner${NC}"
	airodump-ng --bssid "$bssid" -c "$channel" --write "$target"_WPA -o cap "$g" > tmp.txt &
	echo -e "${BGREEN}[-]Sending 150 DeAunthentication Packets and Waiting For The Hanshake Key${NC}" &
	aireplay-ng --deauth 150 -a "$bssid" "$g" > tmp1.txt && channelchange &

	tail -f -n1 tmp.txt | grep -q "WPA handshake"

	nohup xterm -fa 'Monospace' -fs 10 -hold -e "aircrack-ng "$target"_WPA-01.cap -w $passlist" >& /dev/null &
	echo -e "${BGREEN}[-]Network Encrytped Key Capture File:${NC} "$target"_WPA-01.cap"
	echo -e "${BGREEN}[-]Starting Network Manager${NC}"
	service NetworkManager restart 
	echo -e "${BGREEN}[-]Changing Interface Back To Managed Mode${NC}" 
	airmon-ng stop "$g" | head -n 0 >& /dev/null
	rm tmp1.txt tmp.txt >& /dev/null
}

rvuln()
{
	product=$(xmlstarlet sel -t -m '(//port//*[@product])' -v '@product' -n "$file1" 2> /dev/null)
	version=$(xmlstarlet sel -t -m '(//port//*[@product])' -v '@version' -n "$file1" 2> /dev/null | awk '{print $1}')
	website=$(xmlstarlet sel -t -m '//port/script[@id="http-generator"]' -v '@output' -n "$file1" 2> /dev/null )

	paste <(echo "$product") <(echo "$version") | sed s/$'\t'/" "/g | sort -u 1> vul_out.tmp 2> /dev/null
	echo "$website" >> vul_out.tmp
	sed -i "s/httpd/http/g" vul_out.tmp && sed -i "s/-/ /g" vul_out.tmp
	echo -e "${BYELLOW}[-]Starting Vulnerability Analysis${NC}"
	
	while read -r line
	do
		search="$line"
		if [[ ! -z $(echo "$search") ]]
		then
			echo
			echo -e "${BGREEN}Searching for vulnerabilities in${NC} $search"
			echo
			vuln
		else
			echo
			echo -e "${BRED}No Results Found. Try Running The Scan Again.${NC}"
			echo
		fi
	done < vul_out.tmp
}

OSINT()
{
	echo
	read -p $'\033[1;34mEnter a Domain : '$'\033[0m' domain
	echo
	echo "###############################################################################################################"
	echo -e ""
	echo -e "-------------------------------------------Starting An OSINT Scan--------------------------------------------"
	echo -e "${NC}"
	echo "###############################################################################################################"
	echo
	echo -e "${BYELLOW}[-]Running theHarvester${NC}"
	theHarvester -d "$domain" -b "$source" -f "$domain"_theHarvester.xml -l "$limit" 1> "$domain"_theHarvester.txt 2> /dev/null

	hostname=$(xmlstarlet sel -t -m '//host' -v 'hostname' -n "$domain"_theHarvester.xml)
	ipadd=$(xmlstarlet sel -t -m '//host' -v 'ip' -n "$domain"_theHarvester.xml)
	hosts=$(xmlstarlet sel -t -v "//host[not(./*)]" -n "$domain"_theHarvester.xml)
	emails=$(xmlstarlet sel -t -m "//email" -v . -n "$domain"_theHarvester.xml)
	
	echo
	echo -e "${BYELLOW}[-]OSINT INFORMATION${NC}"
	echo 
	paste <(tput setaf 4; tput bold; tput smul; printf %s"HOST(S)"; tput sgr0)
	paste <(echo "$hosts")
	echo 
	paste <(tput setaf 4; tput bold; tput smul; printf %s"EMAIL(S)"; tput sgr0)
	paste <(echo "$emails")
	echo
	
	hostnames=$(tput setaf 4; tput bold; tput smul; printf %s"HOSTNAME(S)"; tput rmul)
	ipadds=$(tput smul; printf %s"IP-ADDRESS(ES)"; tput sgr0)
	
	paste <(echo "$hostname") <(echo "$ipadd") | column -t -L -s$'\t' -N ${hostnames},${ipadds}
	echo
	echo -e "${GREEN}Check the html file or the text file for more information${NC}"
	echo
	mv "$domain"_theHarvester.xml.html "$domain"_theHarvester.html
	rm "$domain"_theHarvester.xml 
}

basic()
{
	echo "###############################################################################################################"
	echo -e ""
	echo -e "---------------------------------------------Starting A Basic Scan---------------------------------------------"
	echo -e "${NC}"
	echo "###############################################################################################################"
	echo ""
	file="nmap_"$ip"_simple.xml"
	nmaprubys
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILE${BGREEN}:${NC} Simple_Scan_$ip.txt"
	fi
	echo
	echo

}

allTCP()
{
	echo "##############################################################################################################"
	echo -e ""
	echo -e "-----------------------------------Starting A NMAP Scan For TCP Ports----------------------------------------"
	echo -e "${NC}"
	echo "##############################################################################################################"
	echo ""
	file1="nmap_"$ip"_tcp.xml"
	nmaprubyc
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILE${NC}${BGREEN}:${NC} TCP_Scan_$ip.txt"
	fi
	echo
	echo
}

halfOpen()
{
	echo "#############################################################################################################"
	echo -e ""
	echo -e "-------------------------------Starting A Half Open NMAP Scan For TCP Ports----------------------------------"
	echo -e "${NC}"
	echo "#############################################################################################################"
	echo ""
	file="nmap_"$ip"_hopen.xml"
	nmaprubyh
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILE${BGREEN}:${NC} HalfOpen_Scan_$ip.txt"
	fi
	echo
	echo
}

UDP()
{
	echo "##############################################################################################################"
	echo -e ""
	echo -e "-----------------------------------Starting A NMAP Scan For UDP Ports-----------------------------------------"
	echo -e "${NC}"
	echo "##############################################################################################################"
	echo ""
	file2="nmap_"$ip"_udp.xml"
	nmaprubyu
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file2" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILE${BGREEN}:${NC} UDP_Scan_$ip.txt"
	fi
	echo
	echo
}

TCP_UDP()
{
	echo "#############################################################################################################"
	echo -e ""
	echo -e "-------------------------Starting A NMAP Scan For TCP and First 1000 UDP Ports-------------------------------"
	echo -e "${NC}"
	echo "#############################################################################################################"
	echo ""
	file1="nmap_"$ip"_tcp.xml"
	file2="nmap_"$ip"_udp.xml"
	nmaprubyc & nmaprubyu 
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null) 
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILES${BGREEN}:${NC} TCP_Scan_$ip.txt, UDP_Scan_$ip.txt"
	fi
	echo
	echo
}

tcpGobust() #done
{
	echo "###########################################################################################################"
	echo -e ""
	echo -e "------------------------------Starting A Scan For All TCP Ports and Gobuster--------------------------------"
	echo -e "${NC}"
	echo "###########################################################################################################"
	echo ""
	file1="nmap_"$ip"_tcp.xml"
	nmaprubyc &
	gobust
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILES${BGREEN}:${NC} TCP_Scan_$ip.txt, Gobust_"$ip"_$p.txt"
	fi
	echo
	echo	
}

allPorts()
{
	echo "###########################################################################################################"
	echo -e ""
	echo -e "------------------------------------Starting A NMAP Scan For All Ports---------------------------------------"
	echo -e "${NC}"
	echo "###########################################################################################################"
	echo ""
	file1="nmap_"$ip"_allp.xml"
	file3="nmap_"$ip"_udp_all.xml"
	nmaprubyc & nmaprubyau 
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILES${BGREEN}:${NC} TCP_Scan_$ip.txt, UDP_All_Scan_$ip.txt"
	fi
	echo	
	echo
}

vulnTCP()
{
	echo "###########################################################################################################"
	echo -e ""
	echo -e "------------------------------------Starting A NMAP Scan For All Ports---------------------------------------"
	echo -e "${NC}"
	echo "###########################################################################################################"
	echo ""
	file1="nmap_"$ip"_allp.xml"
	file3="nmap_"$ip"_udp_all.xml"
	nmaprubyc & nmaprubyv
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILES${BGREEN}:${NC} TCP_Scan_$ip.txt, Vuln_Scan_$ip.txt"
	fi
	vuln
	echo	
	echo
}

fullScan()
{
	echo "##############################################################################################################"
	echo -e ""
	echo -e "--------------------------------------------Starting A Full Scan-------------------------------------------------"
	echo -e "${NC}"
	echo "##############################################################################################################"
	echo ""
	file1="nmap_"$ip"_tcp.xml"
	file4="nmap_"$ip"_vuln.xml"
	nmaprubyc && gobust & nmaprubyv
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		rvuln
		echo -e "${BUGREEN}OUTPUT FILES${BGREEN}:${NC} TCP_Scan_$ip.txt, Vuln_Scan_"$ip".txt, Gobust_"$ip"_$p.txt"
	fi
	echo
	echo
}

fullComp()
{
	echo "######################################################################################################################"
	echo -e ""
	echo -e "----------------------------------------Starting A Full Comprehensive Scan------------------------------------------"
	echo -e "${NC}"
	echo "######################################################################################################################"
	echo ""
	file1="nmap_"$ip"_tcp.xml"
	file3="nmap_"$ip"_udp_all.xml"
	file4="nmap_"$ip"_vuln.xml"
	nmaprubyc && gobust & nmaprubyv & nmaprubyau
	host=$(xmlstarlet sel -t -m '//hosts' -v '@up' -n "$file1" 2> /dev/null)
	if [ -z $(echo "$host") ]
	then
		echo -e "${BRED}Host not found. No Output Files Created!${NC}"
	elif [ "$host" = 0 ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created${NC}"
	else
		rvuln
		echo -e "${BUGREEN}OUTPUT FILES${BGREEN}:${NC} TCP_Scan_$ip.txt, UDP_All_Scan_$ip.txt, Vuln_Scan_"$ip".txt, Gobust_"$ip"_$p.txt"
	fi
	echo
	echo	
}

rgobuster()
{
	echo "################################################################################################################"
	echo -e ""
	echo -e "----------------------------------------------Starting Gobuster-------------------------------------------------"
	echo -e "${NC}"
	echo "################################################################################################################"
	echo ""
	gobust
	if [ ! -e "Gobust_"$ip"_"$p".txt" ]
	then
		echo -e "${BRED}Host is not up. No Output Files Created!${NC}"
	else
		echo -e "${BUGREEN}OUTPUT FILE${BGREEN}:${NC} Gobust_"$ip"_$p.txt"
	fi
	echo
	echo
}

vul_analysis()
{
	echo
	read -p $'\033[1;32mEnter A Query (CVE, CPE, CWE or Keywords): '$'\033[0m' search
	echo 
	echo "##############################################################################################################"
	echo -e ""
	echo -e "------------------------------------------Starting Vulnerability Analysis-------------------------------------"
	echo -e "${NC}"
	echo "##############################################################################################################"
	echo ""
	echo ""
	vuln
}


clear
export PATH="$PATH:/sbin" >& /dev/null
rm flags.txt >& /dev/null
touch flags.txt
echo -e "${BGREEN}  ____  ______ _      _               _  _____   ________     ________  "
echo " |  _ \|  ____| |    | |        /\   ( )/ ____| |  ____\ \   / /  ____| "
echo " | |_) | |__  | |    | |       /  \  |/| (___   | |__   \ \_/ /| |__    "
echo " |  _ <|  __| | |    | |      / /\ \    \___ \  |  __|   \   / |  __|   "
echo " | |_) | |____| |____| |____ / ____ \   ____) | | |____   | |  | |____  "
echo " |____/|______|______|______/_/    \_\ |_____/  |______|  |_|  |______| "
echo
echo "Creator: Abhinav Gupta aka NECROMORPH"
echo "Consider Supporting: https://www.patreon.com/necromorph
echo -e "${BPURPLE}"                                                   

echo ""
echo ""
echo "1.  NMAP Basic"
echo "2.  NMAP Half Open Scan"
echo "3.  NMAP All TCP Ports"
echo "4.  NMAP First 1000 UDP Ports"
echo "5.  NMAP TCP and First 1000 UDP ports"
echo "6.  NMAP All Ports (includes UDP ports)"
echo "7.  NMAP TCP Scan and Gobuster (All TCP ports + Gobuster)"
echo "8.  NMAP TCP Scan And Vuln Analysis (All TCP Ports + NMAP Vuln Scan + Vulnerability Analysis)"
echo "9.  Full Scan (All TCP ports + NMAP Vuln Scan + Gobuster + Vulnerability Analysis)"
echo "10. Full Comprehensive Scan (All Ports + NMAP Vuln Scan + Gobuster + Vulnerability Analysis)"
echo "11. Gobuster"
echo 
echo "Other Utilities Available :-"
echo
echo "a. Vulnerability Lookup (NVD, Exploit-DB and VulDB)"
echo "b. Network Ping Sweep"
echo "c. Wireless Penetration"
echo "d. OSINT"
echo ""
echo "Settings"
echo
echo "a1. Set API key for VulDB"
echo
read -p $'\033[1;35mChoose an option(s) (Eg: 1,2,4) : '$'\033[0m' options
echo 


scan_type()
{
	if [ "$option" == "1" ]; then
		basic
	elif [ "$option" == "2" ]; then
		halfOpen
	elif [ "$option" == "3" ]; then
		allTCP
	elif [ "$option" == "4" ]; then
		UDP
	elif [ "$option" == "5" ]; then
		TCP_UDP
	elif [ "$option" == "6" ]; then
		allPorts
	elif [ "$option" == "7" ]; then
		tcpGobust
	elif [ "$option" == "8" ]; then
		vulnTCP
	elif [ "$option" == "9" ]; then
		fullScan
	elif [ "$option" == "10" ]; then
		fullComp
	elif [ "$option" == "11" ]; then
		rgobuster
	elif [ "$option" == "a" ]; then
		vul_analysis
	elif [ "$option" == "b" ]; then
		pingSweep
	elif [ "$option" == "c" ]; then
		wifiHack
	elif [ "$option" == "d" ]; then
		OSINT
	elif [ "$option" == "a1" ] ; then
		apiSet
	else
		echo -e "${BRED}Invalid option selected!${NC}"
		echo
	fi
}

echo "$options" > option.tmp 
sed -i 's/,/\n/g' option.tmp >& /dev/null

if [[ $(cat option.tmp) =~ ^[0-9] ]]
then	
	echo
	read -p $'\033[1;34mEnter An IP/Domain: '$'\033[0m' ip 
	echo 
fi

if [[ -z $(cat option.tmp) ]]
then
	echo
	echo -e "${BRED}No Option Selected${NC}"
	echo
else
	while read -r option <&3
	do
		scan_type
	done 3< option.tmp
fi
rm option.tmp flags.txt >& /dev/null
rm *.xml >& /dev/null
